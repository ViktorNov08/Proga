import csv

id_counter = 1

class WorkerDB:

    def __init__(self):
        self.workers = []

    def add(self, worker):
        self.workers.append(worker)
        self.write_to_csv()
        print("Worker added and data saved to CSV file.")

    def read(self):
        for worker in self.workers:
            print(f"ID: {worker.getId()}, Name: {worker.name}, Surname: {worker.surname}, Department: {worker.dep}, Salary: {worker.salary}")

    def edit(self, worker_id, new_name, new_surname, new_dep, new_salary):
        for worker in self.workers:
            if worker.getId() == worker_id:
                worker.name = new_name
                worker.surname = new_surname
                worker.dep = new_dep
                worker.salary = new_salary
        self.write_to_csv()
        print("Worker edited and data saved to CSV file.")

    def delete(self, worker_id):
        self.workers = [worker for worker in self.workers if worker.getId() != worker_id]
        self.write_to_csv()
        print("Worker deleted and data saved to CSV file.")

    @staticmethod
    def sort_dec(func):
        def wrapper(self, reverse=False):
            sorted_workers = sorted(self.workers, key=lambda x: x.name, reverse=reverse)
            func(self, sorted_workers)
        return wrapper

    @sort_dec
    def sort(self, sorted_workers):
        for worker in sorted_workers:
            print(f"ID: {worker.getId()}, Name: {worker.name}, Surname: {worker.surname}, Department: {worker.dep}, Salary: {worker.salary}")

    @staticmethod
    def search_decorator(func):
        def wrapper(self, keyword):
            search_result = [worker for worker in self.workers if keyword.lower() in worker.name.lower() or keyword.lower() in worker.surname.lower()]
            func(self, search_result)
        return wrapper

    @search_decorator
    def search(self, search_result):
        for worker in search_result:
            print(f"ID: {worker.getId()}, Name: {worker.name}, Surname: {worker.surname}, Department: {worker.dep}, Salary: {worker.salary}")

    def write_to_csv(self, filename='workers.csv'):
        with open(filename, 'w', newline='') as csvfile:
            fieldnames = ['name', 'surname', 'dep', 'salary']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

            writer.writeheader()

            for worker in self.workers:
                writer.writerow({
                    'name': worker.name,
                    'surname': worker.surname,
                    'dep': worker.dep,
                    'salary': worker.salary
                })

class Worker:
    def __init__(self, name, surname, dep, salary):
        global id_counter
        self.__id = id_counter
        id_counter += 1
        self.name = name
        self.surname = surname
        self.dep = dep
        self.salary = salary

    def getId(self):
        return self.__id

    def setId(self, worker_id):
        self.__id = worker_id

def menu():
    print("\n=== MENU ===")
    print("1. Add a Worker")
    print("2. Display Information about Workers")
    print("3. Edit a Worker")
    print("4. Delete a Worker")
    print("5. Sort Workers")
    print("6. Search for a Worker")
    print("0. Exit")

# Example of using the program
with open("workers.csv", newline='') as csvfile:
    reader = csv.DictReader(csvfile)
    worker_db = WorkerDB()
    for row in reader:
        worker = Worker(row['name'], row['surname'], row['dep'], row['salary'])
        worker_db.add(worker)

while True:
    menu()
    choice = input("Select an option: ")

    if choice == "1":
        name = input("Name: ")
        surname = input("Surname: ")
        dep = input("Department: ")
        salary = input("Salary: ")
        new_worker = Worker(name, surname, dep, salary)
        worker_db.add(new_worker)

    elif choice == "2":
        worker_db.read()

    elif choice == "3":
        worker_id = int(input("Enter the ID of the worker to edit: "))
        new_name = input("New name: ")
        new_surname = input("New surname: ")
        new_dep = input("New department: ")
        new_salary = input("New salary: ")
        worker_db.edit(worker_id, new_name, new_surname, new_dep, new_salary)

    elif choice == "4":
        worker_id = int(input("Enter the ID of the worker to delete: "))
        worker_db.delete(worker_id)

    elif choice == "5":
        worker_db.sort()
        
    elif choice == "6":
        keyword = input("Enter a keyword for search: ")
        worker_db.search(keyword)

    elif choice == "0":
        print("Thank you for using the program. Goodbye!")
        break

    else:
        print("Invalid choice. Please select a valid option.")
